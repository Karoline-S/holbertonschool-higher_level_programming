Tests for 1-my_list

Import the module and create object
-----------------------------------

	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
	>>> bg = BaseGeometry()

	>>> mod_doc = __import__('7-base_geometry').__doc__
     	>>> len(mod_doc) > 1
      	True

      	>>> class_doc = __import__('7-base_geometry').BaseGeometry.__doc__
      	>>> len(class_doc) > 1
      	True

      	>>> func_doc = __import__('7-base_geometry').BaseGeometry.integer_validator.__doc__
      	>>> len(func_doc) > 1
      	True


Test Happy Path
---------------
	>>> bg.integer_validator("my_int", 12)

	>>> bg.integer_validator("width", 45)

Test Errors
-----------

	>>> bg.integer_validator("test", 45.6)
	Traceback (most recent call last):
	...
	TypeError: test must be an integer

	>>> bg.integer_validator("my_int", "hello")
	Traceback (most recent call last):
	...
	TypeError: my_int must be an integer

	>>> bg.integer_validator("my_int", -4)
	Traceback (most recent call last):
	...
	ValueError: my_int must be greater than 0

	>>> bg.integer_validator("my_int", 0)
	Traceback (most recent call last):
	...
	ValueError: my_int must be greater than 0

	>>> bg.integer_validator("my_int", True)
	Traceback (most recent call last):
	...
	TypeError: my_int must be an integer

	>>> bg.integer_validator("my_int", 3.6)
	Traceback (most recent call last):
	...
	TypeError: my_int must be an integer

	>>> bg.integer_validator("my_int", None)
	Traceback (most recent call last):
	...
	TypeError: my_int must be an integer

	>>> bg.integer_validator(12, 12)
